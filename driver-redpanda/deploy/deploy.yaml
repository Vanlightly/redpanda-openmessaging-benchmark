#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

#- name: Collect profiles
#  hosts: kafka, client
#  become: true
#  tags:
#    - profile
#  tasks:
#    - set_fact:
#        time: "{{ ansible_date_time.epoch }}"
#    - name: Generate Flame graph
#      tags:
#        - flame
#      shell: |
#        /tmp/profiler.sh -d 120 `pidof java` -f /tmp/flame.svg
#    - name: Fetch flame graph
#      tags:
#        - flame
#      fetch:
#        src: /tmp/flame.svg
#        dest: results/{{ group_names[0] }}/{{ time }}/{{ inventory_hostname }}/flame.svg
#        flat: yes
#
#    # - name: Dump & compress heap
#    #   tags:
#    #     - heap
#    #   shell: |
#    #     jattach `pidof java` dumpheap /tmp/heap
#    #     chmod 777 /tmp/heap
#    #     tar -cvzf /tmp/heap.tar /tmp/heap
#    # - name: Fetch heap dump
#    #   tags:
#    #     - heap
#    #   fetch:
#    #     src: /tmp/heap.tar
#    #     dest: results/{{ group_names[0] }}/{{ time }}/{{ inventory_hostname }}/heap.tar
#    #     flat: yes
#
#    - name: Heap allocation profile
#      tags:
#        - heap
#      shell: |
#        /tmp/profiler.sh -d 60 -e alloc -o svg -f /tmp/heap.svg 1 `pidof java`
#        chmod 777 /tmp/heap.svg
#    - name: Fetch heap dump
#      tags:
#        - heap
#      fetch:
#        src: /tmp/heap.svg
#        dest: results/{{ group_names[0] }}/{{ time }}/{{ inventory_hostname }}/heap.svg
#        flat: yes

- name: Setup common packages
  hosts: all
  connection: ssh
  become: true
  tasks:
    - name: Remove sysstat
      package:
        name:
          - sysstat
        state: absent
    - name: Install RPM packages
      package:
        name: 
          - mdadm
          - xfsprogs
          - iotop
          - wget
          - java-11
          - sysstat
          - vim
          - chrony
          - git
          - gcc
        state: present

- name: set facts about drives
  hosts: redpanda
  tasks:
  - set_fact: 
      device_info: "{{ hostvars[inventory_hostname].ansible_devices }}"
      nvme_device_ids: "{{ hostvars[inventory_hostname].ansible_devices.keys() | map('regex_search', 'nvme.*') | select('string') | list }}" 
  - set_fact: 
      nvme_devices_for_raid: '{{ (nvme_devices_for_raid | default([])) + ["/dev/" + item] }}'
    loop: '{{ nvme_device_ids }}'
    when: device_info[item]["partitions"] | length == 0

- name: Format raid drives if more then 2 drives
  hosts: redpanda
  tasks:
  - block: 
    - name: define mdadm_arrays variable
      set_fact:
        mdadm_arrays:
        - name: md0
          devices: '{{ nvme_devices_for_raid }}'
          filesystem: xfs
          level: 0
          mountpoint: /mnt/vectorized
          state: present

    - name: run mdadm
      include_role: 
        name: mrlesmithjr.mdadm
    when: nvme_devices_for_raid|length > 1


- name: created a non raid disk
  hosts: redpanda
  tasks:
    - block: 
      - name: create xfs file system
        filesystem: 
          fstype: xfs
          dev: /dev/nvme0n1
      - name: mount nvme device
        mount:
          path: /mnt/vectorized
          src: /dev/nvme0n1
          fstype: xfs
          state: mounted 
      when: nvme_devices_for_raid|length == 1

- name: configure the data path
  hosts: redpanda
  tasks: 
  - name: data path
    file:
      path: /mnt/vectorized/redpanda
      state: directory
      owner: root
      group: root
      mode: ugo=rwx
  - name: set premissions
    file:
      dest: /var/lib/redpanda
      src: /mnt/vectorized/redpanda
      state: link
      owner: root
      group: root
      mode: ugo=rwx

#- name: Format and mount disks for Redpanda hosts
#  hosts: redpanda
#  connection: ssh
#  become: true
#  tasks:
#    - command: >
#        tuned-adm profile latency-performance
#    - name: Format disks
#      filesystem:
#        fstype: xfs
#        dev: "{{ item }}"
#      with_items:
#        - "/dev/nvme1n1"
#        - "/dev/nvme2n1"
#    - name: Mount disks
#      mount:
#        path: "{{ item.path }}"
#        src: "{{ item.src }}"
#        fstype: xfs
#        opts: defaults,noatime,nodiscard
#        state: mounted
#      with_items:
#        - { path: "/mnt/data-1", src: "/dev/nvme1n1" }
#        - { path: "/mnt/data-2", src: "/dev/nvme2n1" }

- name: Store server lists
  hosts: all
  connection: ssh
  tags: client
  tasks:
    - set_fact:
        bootstrapServers: "{{ groups['redpanda'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"

- name: install redpanda
  hosts: redpanda
  tasks:
    - name: add the redpanda repo
      shell: |
        curl -s https://ceba06f0585fdd548c3106334751dcd75abf0d043320fab5:@packagecloud.io/install/repositories/vectorizedio/v/script.rpm.sh | sudo bash
      args: 
        warn: no 
    - name: install redpanda
      package: 
        name: 
          - redpanda
        state: present
        update_cache: yes




#- name: Kafka installation
#  hosts: redpanda
#  connection: ssh
#  become: true
#  tasks:
#    - file: path=/opt/kafka state=absent
#    - file: path=/opt/kafka state=directory
#    - set_fact:
#        boostrapServers: "{{ groups['kafka'] | map('extract', hostvars, ['private_ip']) | map('regex_replace', '^(.*)$', '\\1:9092') | join(',') }}"
#        kafkaVersion: "2.6.0"
#    - debug:
#        msg: "boostrap servers: {{ boostrapServers }}"
#
#    #################### Release ####################
#    - name: Download Kafka package
#      unarchive:
#        src: http://mirrors.ocf.berkeley.edu/apache/kafka/{{ kafkaVersion }}/kafka_2.13-{{ kafkaVersion }}.tgz
#        remote_src: yes
#        dest: /opt/kafka
#        extra_opts: ["--strip-components=1"]
#
#    #################### Staging ####################
#    # # https://access.redhat.com/articles/5117881
#    # - name: Fix Sectigo Root CA expiration issue
#    #   shell: |
#    #     trust dump --filter "pkcs11:id=%ad%bd%98%7a%34%b4%26%f7%fa%c4%26%54%ef%03%bd%e0%24%cb%54%1a;type=cert" > /etc/pki/ca-trust/source/blacklist/addtrust-external-root.p11-kit
#    #     update-ca-trust
#    # - name: Download Kafka package
#    #   unarchive:
#    #     src: https://home.apache.org/~rhauch/kafka-2.6.0-rc2/kafka_2.13-2.6.0.tgz
#    #     remote_src: yes
#    #     dest: /opt/kafka
#    #     extra_opts: ["--strip-components=1"]
#
#    #################### Custom build ####################
#    # - name: Copy Kafka
#    #   unarchive:
#    #     src: /Users/anikhil/offsets_patch/core/build/distributions/kafka_2.13-2.7.0-SNAPSHOT.tgz
#    #     dest: /opt/kafka
#    #     extra_opts: ["--strip-components=1"]
#
#    - set_fact:
#        privateIp: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
#    - name: Change locale to en_US.utf-8
#      shell: |
#        echo 'LANG=en_US.utf-8
#              LC_ALL=en_US.utf-8' > /etc/environment
#    - name: Setup JMX for Prometheus
#      copy:
#        src: "monitoring/jmx_exporter/jmx_prometheus_javaagent-0.13.0.jar"
#        dest: "/opt/kafka/jmx_prometheus_javaagent-0.13.0.jar"
#    - name: Configure JMX for Prometheus (Kafka)
#      template:
#        src: "monitoring/jmx_exporter/metrics.yml"
#        dest: "/opt/kafka/metrics.yml"
#    - name: Configure JMX for Prometheus (Zookeeper)
#      template:
#        src: "monitoring/jmx_exporter/zookeeper.yml"
#        dest: "/opt/kafka/zookeeper.yml"

- hosts: redpanda
  tasks:
  - name: ensure /etc/redpanda exists
    file:
      path: /etc/redpanda
      state: directory

  - name: configure redpanda
    notify:
      - restart redpanda-tuner
      - restart redpanda
    vars:
      seed_private_ip: '{{ hostvars[groups["redpanda"][0]].private_ip }}'
    shell: |
      rpk config set cluster_id 'test'
      rpk config set organization 'vectorized.io'
      rpk config set redpanda.advertised_kafka_api '{
        address: {{ hostvars[inventory_hostname].private_ip }},
        port: 9092
      }' --format yaml
      rpk config set redpanda.advertised_rpc_api '{
        address: {{ hostvars[inventory_hostname].private_ip }},
        port: 33145
      }' --format yaml
      rpk mode production

      {% if hostvars[groups['redpanda'][0]].id == hostvars[inventory_hostname].id %}
      sudo rpk config bootstrap \
        --id {{ groups['redpanda'].index(inventory_hostname) }} \
        --self {{ hostvars[inventory_hostname].private_ip }}

      {% else %}

      sudo rpk config bootstrap \
        --id {{ groups['redpanda'].index(inventory_hostname) }} \
        --self {{ hostvars[inventory_hostname].private_ip }} \
        --ips {{ seed_private_ip }}
      {% endif %}

  handlers:
  - name: restart redpanda-tuner
    systemd:
      name: redpanda-tuner
      state: restarted
  - name: restart redpanda
    systemd:
      name: redpanda
      state: restarted

- name: Chrony setup
  hosts: client
  connection: ssh
  become: true
  tasks:
    - name: Set up chronyd
      template:
        src: "templates/chrony.conf"
        dest: "/etc/chrony.conf"
    - systemd:
        state: restarted
        daemon_reload: yes
        name: "chronyd"

- name: Setup Benchmark client
  hosts: client
  connection: ssh
  become: true
  tags: client
  tasks:
    - file: path=/opt/benchmark state=absent
    - name: Copy benchmark code
      unarchive:
        src: ../../package/target/openmessaging-benchmark-0.0.1-SNAPSHOT-bin.tar.gz
        dest: /opt
    - shell: mv /opt/openmessaging-benchmark-0.0.1-SNAPSHOT /opt/benchmark
    #- shell: tuned-adm profile latency-performance

    - name: Get list of driver config files
      raw: ls -1 /opt/benchmark/driver-redpanda/*.yaml
      register: drivers_list

    - name: Configure URL
      lineinfile:
        dest: "{{ item }}"
        regexp: "^  bootstrap.servers="
        line: "  bootstrap.servers={{ bootstrapServers }}"
      with_items: "{{ drivers_list.stdout_lines }}"
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark-worker
        regexp: "^JVM_MEM="
        line: 'JVM_MEM="-Xms16G -Xmx16G -XX:+UseG1GC -XX:MaxGCPauseMillis=10 -XX:+ParallelRefProcEnabled -XX:+UnlockExperimentalVMOptions -XX:+AggressiveOpts -XX:+DoEscapeAnalysis -XX:ParallelGCThreads=32 -XX:ConcGCThreads=32 -XX:G1NewSizePercent=50 -XX:+DisableExplicitGC -XX:-ResizePLAB -XX:+PerfDisableSharedMem -XX:+AlwaysPreTouch -XX:-UseBiasedLocking"'
    - name: Configure memory
      lineinfile:
        dest: /opt/benchmark/bin/benchmark
        regexp: "^JVM_MEM="
        line: 'JVM_MEM="-Xmx1G"'
    - name: Setup JMX for Producer/Consumer clients
      copy:
        src: "monitoring/jmx_exporter/jmx_prometheus_javaagent-0.13.0.jar"
        dest: "/opt/benchmark/jmx_prometheus_javaagent-0.13.0.jar"
    - name: Configure JMX for Prometheus (Client)
      template:
        src: "monitoring/jmx_exporter/client.yml"
        dest: "/opt/benchmark/metrics.yml"
    - template:
        src: "templates/workers.yaml"
        dest: "/opt/benchmark/workers.yaml"
    - name: Install benchmark systemd service
      template:
        src: "templates/benchmark-worker.service"
        dest: "/etc/systemd/system/benchmark-worker.service"
    - name: "Restart benchmark worker"
      tags:
        - configure
      systemd:
        state: restarted
        daemon_reload: yes
        name: "benchmark-worker"

- name: Hosts addresses
  hosts: localhost
  become: false
  tasks:
    - debug:
        msg: Redpanda nodes {{ item }}"
      with_items: "{{ groups['redpanda'] }}"
    - debug:
        msg: "Benchmark clients {{ item }}"
      with_items: "{{ groups['client'] }}"


# Install the monitoring stack
- name: Install Node Exporter
  hosts: redpanda
  roles:
  - cloudalchemy.node-exporter

- name: create a local tmp directory
  hosts: localhost
  become: false
  tasks:
    - name: create a local temp directory
      tempfile: 
        state: directory
        suffix: grafana
      register: grafana_temp_dir
    - name: register temp path with redpanda host
      set_fact: 
        grafana_dir: "{{ grafana_temp_dir.path }}"
      delegate_to: "{{ groups['redpanda'][0] }}"
      delegate_facts: True
    - name: register temp path with prometheus host
      set_fact: 
        grafana_dir: "{{ grafana_temp_dir.path }}"
      delegate_to: "{{ item }}"
      delegate_facts: True 
      with_items: "{{ groups['prometheus'] }}"

- hosts: redpanda[0]
  tasks:
  - name: generate the redpanda grafana dashboard
    shell: |
      rpk generate grafana-dashboard --datasource prometheus --prometheus-url 'http://{{hostvars[inventory_hostname].private_ip}}:9644/metrics' > '/tmp/redpanda-grafana.json'

  - name: fetch grafana dashboard
    fetch:
      src: /tmp/redpanda-grafana.json
      dest: "{{ grafana_dir }}/"
      flat: yes

- hosts: prometheus
  roles:
  - cloudalchemy.prometheus
  vars:
    prometheus_scrape_configs:
      - job_name: "redpanda"
        static_configs:
          - targets: "{{ groups['redpanda'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:9644') | list  }}"
      - job_name: "node"
        static_configs:
          - targets: "{{ groups['redpanda'] | map('extract', hostvars, ['ansible_default_ipv4','address']) | map('regex_replace', '^(.*)$','\\1:9100') | list  }}"
      - job_name: "client - jmx"
        static_configs:
          - targets: "{{ groups['client'] | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | map('regex_replace', '^(.*)$', '\\1:9090') | list }}"

- hosts: prometheus
  roles: 
  - cloudalchemy.grafana
  vars:
    grafana_version: 6.7.3
    grafana_security:
      admin_user: admin
      admin_password: enter_your_secure_password
    grafana_datasources:
    - name: prometheus
      type: prometheus
      access: proxy
      url: 'http://localhost:9090'
      basicAuth: false
    grafana_dashboards_dir: '{{ grafana_dir }}'

## Setup the Prometheus/Grafana monitoring stack
#- name: Prometheus installation
#  hosts: prometheus
#  connection: ssh
#  become: true
#  tasks:
#    - name: Add Extras Repo
#      shell: yum-config-manager --enable rhui-REGION-rhel-server-extras
#    - name: Install RPM packages
#      yum: pkg={{ item }} state=latest
#      with_items:
#        - docker
#    - set_fact:
#        prometheusVersion: "2.19.3"
#    - file: path=/opt/prometheus state=absent
#    - file: path=/opt/prometheus state=directory
#    - name: Download Prometheus Binary Package
#      unarchive:
#        src: "https://github.com/prometheus/prometheus/releases/download/v{{ prometheusVersion }}/prometheus-{{ prometheusVersion }}.linux-amd64.tar.gz"
#        remote_src: yes
#        dest: /opt/prometheus
#        extra_opts: ["--strip-components=1"]
#    - set_fact:
#        private_ip: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"

#- name: Prometheus setup
#  hosts: prometheus
#  connection: ssh
#  become: true
#  tasks:
#    - file:
#        path: "/opt/prometheus/{{ item }}"
#        state: directory
#      with_items:
#        - data
#    - template:
#        src: "templates/prometheus.service"
#        dest: "/etc/systemd/system/prometheus.service"
#    - template:
#        src: "templates/kafka-dashboard.service"
#        dest: "/etc/systemd/system/kafka-dashboard.service"
#    - template:
#        src: "templates/prometheus.yml"
#        dest: "/opt/prometheus/prometheus.yml"
#    - systemd:
#        state: restarted
#        daemon_reload: yes
#        name: "kafka-dashboard"
#
#- name: Install Node exporter on Brokers to collect system metrics
#  hosts: kafka
#  become: true
#  tasks:
#    - name: Add user node_exporter
#      user:
#        name: node_exporter
#        shell: /bin/false
#        system: true
#        create_home: no
#
#    - name: Download and extract
#      unarchive:
#        src: https://github.com/prometheus/node_exporter/releases/download/v1.0.1/node_exporter-1.0.1.linux-amd64.tar.gz
#        dest: /tmp
#        remote_src: yes
#
#    - name: Copy bin node_exporter to /usr/local/bin
#      copy:
#        src: /tmp/node_exporter-1.0.1.linux-amd64/node_exporter
#        remote_src: yes
#        dest: /usr/local/bin/
#        owner: node_exporter
#        group: node_exporter
#        mode: u+x,g+x,o+x
#
#    - name: Create service node_exporter.service
#      blockinfile:
#        path: /etc/systemd/system/node_exporter.service
#        block: |
#          [Unit]
#          Description=Prometheus Node Exporter
#          Wants=network-online.target
#          After=network-online.target
#          [Service]
#          User=node_exporter
#          Group=node_exporter
#          Type=simple
#          ExecStart=/usr/local/bin/node_exporter
#          [Install]
#          WantedBy=multi-user.target
#        create: true
#
#    - name: systemctl daemon_reload
#      systemd:
#        daemon_reload: yes
#
#    - name: Start and Enable node_exporter
#      service:
#        name: node_exporter
#        state: started
#        enabled: yes
#
#    - name: Check whether port 9100 is available
#      wait_for:
#        port: 9100
#        state: started
#        timeout: 5
#
#- name: Install jattach and async-profiler
#  hosts: all
#  become: true
#  tasks:
#    - name: Download and extract async-profiler
#      unarchive:
#        src: https://github.com/jvm-profiling-tools/async-profiler/releases/download/v1.7.1/async-profiler-1.7.1-linux-x64.tar.gz
#        dest: /tmp
#        remote_src: yes
#
#    - name: Download and install jattach
#      get_url:
#        url: https://github.com/apangin/jattach/releases/download/v1.5/jattach
#        dest: /usr/bin/jattach
#        mode: "0755"
